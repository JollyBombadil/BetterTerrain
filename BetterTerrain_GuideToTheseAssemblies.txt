Technical notes.

----GenStep_ElevationFertility
Tweaked the perlin maps for elevation and fertility.  Fertility is now broader, constant but less drastic fluctuations.  Elevation is slightly more spastic.
I added a perlin map for trees.  Used in GenStep_Plants.

Mild edits to elevation at flat and small hills since GenStep_Terrain calculates mountains differently now.


----GenStep_RocksFromGrid
in generate I called in the fertility grid to help determine where mountains should go.  
Basing it off of 2 perlin maps gives much more interesting shapes, it also can help the mountains flow better with the terrain.
To keep the map from just looking topographical and dull I multiply points on the elevation grid by ones on the fertility grid.
I set it up so mountains can spawn only when elevation is high and when fertility is high or very low.  
This means mountains will genererally form in areas away from low fertility areas, but occasionally pop up around lakes or rivers, exc.


----GenStep_Terrain
in TerrainFrom I added in if statements that calculate a noise variable.  Noise is the value the biome XMLs will use when determining what terrain goes where.
Higher elevations calculate the XML value based more on elevation, lower elevations calculate it based more on fertility.
This creates interesting terrain yet keeps the ThingDefOf.Sandstone close to mountains (mountains are determined in RocksFromGrid)


----GenStep_Plants
This got a lil messy.  I wanted to make specific plants only spawn in specific areas.  So I needed tags or flags to use to define what goes where.
I decided to use the terrain variable 'canTakeFootprints' as the assemblies way of telling if the terrain I'm placing on is fertile.
Then I used Sowtags in the ThingDef.plant class to tell the assemblies if the plant should go on fertile soil and if it should be based on the plant perlin map or not.

So the first foreach method after the 5 list defines is just reading the tags from all the plants in the biome and putting them in the correct list.
The huge foreach after I define the canPlaceList takes a random tile in the map (vanilla methodology) exc after it determine if the ground was plantable, I added in my stuff.
I check if the land is fertile or not, then for each plant in the biome that should be placed on that terrain (fertile or unfertile)
 I get the group of plants that should go there and should be placed using the perlin map (usually trees), choose a random one based off the perlin value.
Then I add in all the plants that are to be randomly scattered about that terrain (grass, debris, filler, exc exc)

----XMLS
The only catch is in the plants XMLS, the sowtags in ThingDef.plant are very crucial to my mod.  
They determine where the plant should go (in the foresty part of the map, or the more baren) and how (clumped up based on a perlin map, or scattered randomly)
